{
    "LUD Create Setup Table": {
		"prefix": "LUDCreateSetupTable",
		"scope": "al",
		"body": [
			"Caption = '${1:\"Setup Table Caption\"}';",
			"Permissions = tabledata ${2:setup table name} = i;",
			"",
			"fields",
			"{",
			"	field(1; \"Primary Key\"; Code[10]) { Caption = 'Primary Key'; }",
			"",
			"}",
			"",
			"keys",
			"{",
			"	key(PK; \"Primary Key\")",
			"	{",
			"		Clustered = true;",
			"	}",
			"}",
			"",
			"internal procedure InitSetup()",
			"var",
			"	Setup: Record ${2:setup table name};",
			"begin",
			"	if Setup.IsEmpty() then",
			"		Setup.Insert();",
			"end;",
			"",
			"/// <summary>",
    		"/// Check if an instance of the setup table exists.",
    		"/// </summary>",
			"procedure GetOnce();",
			"begin",
				"if IsNullGuid(SystemId) then",
					"if not Get() then",
						"InitSetup();",
			"end;"
		],
		"description": "Creates a body of setup table",
	},
	"LUD Create Setup Card Page": {
		"prefix": "LUDCreateSetupCardPage",
		"scope": "al",
		"body": [
			"Caption = '${1:Setup Card Page Caption}';",
			"PageType = Card;",
			"SourceTable = ${2:\"Setup Table Name\"};",
			"ApplicationArea = All;",
			"UsageCategory = Administration;",
			"InsertAllowed = false;",
			"DeleteAllowed = false;",
			"",
			"layout",
			"{",
			"	area(content)",
			"	{",
			"		group(General)",
			"		{",
			"			Caption = 'General';",
			"		}",
			"	}",
			"	",
			"	area(factboxes)",
			"	{",
			"		systempart(Links; Links)",
			"		{",
			"			ApplicationArea = RecordLinks;",
			"			Visible = false;",
			"		}",
			"		systempart(Notes; Notes)",
			"		{",
			"			ApplicationArea = Notes;",
			"			Visible = false;",
			"		}",
			"	}",
			"}",
			"",
			"trigger OnOpenPage()",
			"begin",
			"	Rec.Reset();",
			"	Rec.InitSetup();",
			"end;"
		],
		"description": "Creates a body of setup card page",
	},
    "LUD Setup EventSubscriber": {
        "prefix": "LUDSetupEventSubscriber",
        "scope": "al",
        "body": [
            "[EventSubscriber(ObjectType::Codeunit, Codeunit::\"Company-Initialize\", OnAfterInitSetupTables, '', false, false)]",
            "local procedure OnAfterInitSetupTables();",
            "var",
            "    Setup: Record {$1:Name of the Setup Table};",
            "begin",
            "    Setup.InitSetup();",
            "end;",
        ],
        "description": "Creates an EvenSubscriber for company initialize to setup the extension"
    },
	"LUD ToDo BC22": {
		"prefix": "LUDToDoBC22",
		"scope": "al",
		"body": [
			"//TODO: BC22, $1"
		],
		"description": "Creates a Todo comment for changes to be considered for BC22 changes"
	},
	"LUD Handled Pattern": {
		"prefix": "LUDHandledPattern",
		"scope": "al",
		"body": [
			"var",
			"	IsHandled: Boolean;",
			"begin",
			"	IsHandled := false;",
			"	OnBefore$1($2, IsHandled);",
			"	if IsHandled then",
            "		exit;",
			"end;"
		],
		"description": "Creates a handled pattern for procedures",
	},
	"LUD Source Code Setup Table Extension": {
		"prefix": "LUDSourceCodeSetupTableExtension",
		"scope": "al",
		"body": [
			"tableextension $1 $2 extends \"Source Code Setup\"",
			"{",
			"	fields",
			"	{",
			"		field($1; $3; Code[10])",
			"		{",
			"			Caption = '$3';",
			"			TableRelation = \"Source Code\";",
			"		}",
			"	}",
			"}",
		],
		"description": "Creates the table extension for the source code setup table",
	},
	"LUD AssistEdit Procedure": {
		"prefix": "LUDAssistEditProcedure",
		"scope": "al",
		"body": [
			"procedure AssistEdit(OldRec: Record ${1:Record Name}) Result: Boolean",
			"var",
			"    TmpRec: Record ${1:Record Name};",
			"    IsHandled: Boolean;",
			"begin",
			"    IsHandled := false;",
			"    OnBeforeAssistEdit(TmpRec, OldRec, Result, IsHandled);",
			"    if IsHandled then",
			"        exit;",
			" ",
			"    TmpRec.Copy(Rec);",
			"    ${2:Name of Setup Table}.GetOnce();",
			"    ${2:Name of Setup Table}.TestField(${3:Name of No. Series});",
			"    if NoSeriesMgt.SelectSeries(${2:Name of Setup Table}.${3:Name of No. Series}, OldRec.\"No. Series\", TmpRec.\"No. Series\") then begin",
			"        NoSeriesMgt.SetSeries(TmpRec.\"No.\");",
			"        TmpRec.Validate(\"No.\");",
			"        Rec := TmpRec;",
			"        exit(true);",
			"    end;",
			"end;"
		],
		"description": "Creates an AssistEdit Procedure which handles the number assignment for new records"
	},
	"LUD No., No. Series Table Fields": {
		"prefix": "LUDNoAndNoSeriesTableFields",
		"scope": "al",
		"body": [
			"field(1; \"No.\"; Code[20])",
			"{",
			"    Caption = 'No.';",
			" ",
			"    trigger OnValidate()",
			"    begin",
			"        if \"No.\" <> xRec.\"No.\" then begin",
			"            ${1:Setup Table Name}.GetOnce();",
			"            ${1:Setup Table Name}.TestField(${2:Number Series});",
			"            NoSeriesMgt.TestManual(${1:Setup Table Name}.${2:Number Series});",
			"            \"No. Series\" := '';",
			"        end;",
			"    end;",
			"}"
			"field(25; \"No. Series\"; Code[20])",
			"{",
			"    Caption = 'No. Series';",
			"    Editable = false;",
			"    TableRelation = \"No. Series\";",
			"}"
		],
		"description": "Creates the field No. and No. Series and initializes it with the OnValidate trigger and table relation"
	  },
	"LUD Blocked Fields": {
		"prefix": "LUDBlockedFields",
		"scope": "al",
		"body": [
			"field(21; Blocked; Boolean)",
			"{",
			"    Caption = 'Blocked';",
			" ",
			"    trigger OnValidate()",
			"    begin",
			"        if not Blocked then",
			"            \"Block Reason\" := '';",
			"    end;",
			"}",
			" ",
			"field(22; \"Block Reason\"; Text[250])",
			"{",
			"    Caption = 'Block Reason';",
			" ",
			"    trigger OnValidate()",
			"    begin",
			"        if \"Block Reason\" <> '' then",
			"            TestField(Blocked, true);",
			"    end;",
			"}"
		],
		"description": "Creates the fields Blocked and Blocked Description with the OnValidate trigger"
	}
}